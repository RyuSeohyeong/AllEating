<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
 
 <mapper namespace="com.spring.alleating.community.dao.CommunityDAO">
 	<resultMap id="communityResult" type="reviewBoardVO">
		<result property="articleNO" column="articleNO" />
		<result property="id" column="id" />
		<result property="productId" column="productId" />
			<result property="productBrand" column="productBrand" />
		<result property="productName" column="productName" />
		<result property="fileName" column="fileName" />
		<result property="content" column="content" />
		<result property="writeDate" column="writeDate" />
</resultMap>
<resultMap id="productImgResult" type="productImgVO">
		<result property="imgId" column="imgId" />
		<result property="productId" column="productId" />
		<result property="reg_id" column="reg_id" />
		<result property="fileName" column="fileName" />
		<result property="img_type" column="img_type" />
		<result property="creDate" column="creDate" />
	</resultMap>
<resultMap id="userPointResult" type="userPointVO">
		<result property="userPoint" column="userPoint" />
		<result property="id" column="id" />
</resultMap>
	
	<insert id="insertReview" parameterType="java.util.Map">
	 <selectKey resultType="int" keyProperty="articleNO"
			order="BEFORE">
			select ifnull(max(articleNO),0)+1 from review_board
		</selectKey> 
	
	
	<![CDATA[
	
	insert into review_board(
	articleNO,
	id,
	productId,
	productBrand,
	productName,
	fileName,
	content) values (
	#{articleNO},
	#{id},
	#{productId},
	#{productBrand},
	#{productName},
	#{fileName},
	#{content}
	)
    
	
	]]>
	
	</insert>
	
	<!-- 리뷰 작성하면 review_ny를 y로 업데이트 -->
	<update id="updateReviewStatus" parameterType="java.util.Map">
    <![CDATA[
    UPDATE alleating_order_detail
    SET review_ny = 'y'
    WHERE order_seq_num = #{order_seq_num} AND review_ny = 'n'
    ]]>
</update>
	
	<insert id="insertReviewImg" parameterType="productImgVO">
	insert into product_img (imgId,
		                                     productId,
									         fileName,
											 fileType,
											 reg_id)
											 values
											 (#{imgId},
											 #{productId},
											 #{fileName},
											 #{fileType},
											 #{reg_id} )
	
	</insert>

<!-- 작성한 후기 목록 -->
<select id="selectWrittenReview" resultMap="communityResult" parameterType="java.util.Map">
 select DISTINCT r.*, a.cateCode, a.productId, a.review_ny
from review_board r
inner join  alleating_order_detail a on r.productId = a.productId
where r.id=#{id} and a.review_ny = 'y'
</select>
	
<!-- 사용자가 작성한 후기들 목록-->
<select id="selectAllReview" resultMap="communityResult" parameterType="java.util.Map">
select DISTINCT r.*, a.cateCode, a.productId, a.review_ny
from review_board r
inner join  alleating_order_detail a on r.productId = a.productId
where a.review_ny = 'y'
</select>


<!-- 적립금 select -->
<select id="selectReward" resultMap="userPointResult" parameterType="java.util.Map">
select * from user_point where id=#{id}
</select>

<!-- 구매후기 작성후 적립금 업데이트 -->
<update id="updateReward" parameterType="java.util.Map">
update user_point set userPoint where id=#{id}
</update>
<!-- 구매후기 작성해서 받은 적립금 구매내역에 insert -->
<insert id="insertRewardHistory" parameterType="userPointVO">
insert into user_point (pointNum, id, usePoint, creDate, content)
 values (#{pointNum}, #{id}, #{usePoint}, #{creDate}, #{content})
</insert>

<!-- 구매후기 삭제-->
<delete id="deleteReward" parameterType="java.util.Map">
delete from review_board where articleNO=#{articleNO}
</delete>
	
	</mapper>